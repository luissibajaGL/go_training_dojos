// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fib.proto
package pb_fib_v1

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package
type FibRequest struct {
	FibNum               uint64   `protobuf:"varint,1,opt,name=fibNum,proto3" json:"fibNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FibRequest) Reset()         { *m = FibRequest{} }
func (m *FibRequest) String() string { return proto.CompactTextString(m) }
func (*FibRequest) ProtoMessage()    {}
func (*FibRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db00d511e02f9dc, []int{0}
}
func (m *FibRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FibRequest.Unmarshal(m, b)
}
func (m *FibRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FibRequest.Marshal(b, m, deterministic)
}
func (m *FibRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FibRequest.Merge(m, src)
}
func (m *FibRequest) XXX_Size() int {
	return xxx_messageInfo_FibRequest.Size(m)
}
func (m *FibRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FibRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FibRequest proto.InternalMessageInfo

func (m *FibRequest) GetFibNum() uint64 {
	if m != nil {
		return m.FibNum
	}
	return 0
}

type FibResponse struct {
	Result               uint64   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FibResponse) Reset()         { *m = FibResponse{} }
func (m *FibResponse) String() string { return proto.CompactTextString(m) }
func (*FibResponse) ProtoMessage()    {}
func (*FibResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db00d511e02f9dc, []int{1}
}
func (m *FibResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FibResponse.Unmarshal(m, b)
}
func (m *FibResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FibResponse.Marshal(b, m, deterministic)
}
func (m *FibResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FibResponse.Merge(m, src)
}
func (m *FibResponse) XXX_Size() int {
	return xxx_messageInfo_FibResponse.Size(m)
}
func (m *FibResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FibResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FibResponse proto.InternalMessageInfo

func (m *FibResponse) GetResult() uint64 {
	if m != nil {
		return m.Result
	}
	return 0
}
func init() {
	proto.RegisterType((*FibRequest)(nil), "pb.fib.v1.FibRequest")
	proto.RegisterType((*FibResponse)(nil), "pb.fib.v1.FibResponse")
}
func init() { proto.RegisterFile("fib.proto", fileDescriptor_2db00d511e02f9dc) }

var fileDescriptor_2db00d511e02f9dc = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0xcb, 0x4c, 0xd2,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2c, 0x48, 0xd2, 0x03, 0xf1, 0xca, 0x0c, 0x95, 0x54,
	0xb8, 0xb8, 0xdc, 0x32, 0x93, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xc4, 0xb8, 0xd8,
	0xd2, 0x32, 0x93, 0xfc, 0x4a, 0x73, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x82, 0xa0, 0x3c, 0x25,
	0x55, 0x2e, 0x6e, 0xb0, 0xaa, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x90, 0xb2, 0xa2, 0xd4, 0xe2,
	0xd2, 0x9c, 0x12, 0x98, 0x32, 0x08, 0xcf, 0xc8, 0x03, 0x6c, 0x58, 0x70, 0x6a, 0x51, 0x59, 0x66,
	0x72, 0xaa, 0x90, 0x15, 0x17, 0xbb, 0x73, 0x7e, 0x6e, 0x41, 0x69, 0x49, 0xaa, 0x90, 0xa8, 0x1e,
	0xdc, 0x46, 0x3d, 0x84, 0x75, 0x52, 0x62, 0xe8, 0xc2, 0x10, 0xf3, 0x95, 0x18, 0x92, 0xd8, 0xc0,
	0x0e, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x09, 0xd1, 0xf5, 0xb5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FibServiceClient is the client API for FibService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FibServiceClient interface {
	Compute(ctx context.Context, in *FibRequest, opts ...grpc.CallOption) (*FibResponse, error)
}
type fibServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFibServiceClient(cc grpc.ClientConnInterface) FibServiceClient {
	return &fibServiceClient{cc}
}
func (c *fibServiceClient) Compute(ctx context.Context, in *FibRequest, opts ...grpc.CallOption) (*FibResponse, error) {
	out := new(FibResponse)
	err := c.cc.Invoke(ctx, "/pb.fib.v1.FibService/Compute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FibServiceServer is the server API for FibService service.
type FibServiceServer interface {
	Compute(context.Context, *FibRequest) (*FibResponse, error)
}

// UnimplementedFibServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFibServiceServer struct {
}

func (*UnimplementedFibServiceServer) Compute(ctx context.Context, req *FibRequest) (*FibResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compute not implemented")
}
func RegisterFibServiceServer(s *grpc.Server, srv FibServiceServer) {
	s.RegisterService(&_FibService_serviceDesc, srv)
}
func _FibService_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FibRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibServiceServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.fib.v1.FibService/Compute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibServiceServer).Compute(ctx, req.(*FibRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FibService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.fib.v1.FibService",
	HandlerType: (*FibServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compute",
			Handler:    _FibService_Compute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fib.proto",
}
